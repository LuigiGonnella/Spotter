generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

model User {
    id Int @id @default(autoincrement())
    email String @unique
    passwordHash String? //opzionale per utenti OAuth
    role Role @default(USER)
    provider String?
    providerId String?
    createdAt DateTime @default(now())
    refreshToken RefreshToken[]

    //campi profilo
    firstName String?
    lastName String?
    dateOfBirth DateTime?
    bio String?
    profileImage String? //URL

    isPublic Boolean @default(false)

    //sistema GymBros
    sentBuddyRequests GymBuddyRequest[] @relation("SentRequests")
    receivedBuddyRequests GymBuddyRequest[] @relation("ReceivedRequests")
    
    // Friendship system (many-to-many)
    gymBros GymBroFriendship[] @relation("User1")
    gymBrosOf GymBroFriendship[] @relation("User2")

    memberships UserGym[] //relazione con le iscrizioni in palestra
    workoutPlans WorkoutPlan[]
    createdWorkouts DailyWorkout[] @relation("CreatedWorkouts")

    // Records degli esercizi per ranking
    exerciseRecords ExerciseRecord[]


    @@map("users")
}

model RefreshToken {
    id Int @id @default(autoincrement())
    jti String @unique //identificativo
    tokenHash String //contenuto hashato
    userId Int
    expiresAt DateTime
    revoked Boolean @default(false)
    createdAt DateTime @default(now())

    //relazioni
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("refresh_tokens")
}

enum Role {
    USER
    GYM_ADMIN
    SUPER_ADMIN
}

//palestra
model Gym {
    id Int @id @default(autoincrement())
    name String
    address String
    city String
    description String?

    // Geolocalizzazione per discovery
    latitude Decimal?
    longitude Decimal?

    createdAt DateTime @default(now())

    //relazioni
    members UserGym[]
    buddyRequests GymBuddyRequest[]
    exerciseRecords ExerciseRecord[] // Records interni alla palestra
    gymBroFriendships GymBroFriendship[]


    @@map("gyms")
}

//user-gym
model UserGym {
    id Int @id @default(autoincrement())
    userId Int
    gymId Int
    joinedAt DateTime @default(now())
    isActive Boolean @default(true)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    gym Gym @relation(fields: [gymId], references: [id], onDelete: Cascade)
}

model DailyWorkout { 
    id Int @id @default(autoincrement())
    title String
    description String?
    duration Int?
    createdAt DateTime @default(now())

    createdBy Int
    creator User @relation("CreatedWorkouts", fields: [createdBy], references: [id], onDelete: Cascade)

    workoutExercises WorkoutExercise[]




}

model WorkoutPlan {//utente crea una sua scheda e può renderla pubblica. Può anche scegliere un workout già pubblico
    id Int @id @default(autoincrement())
    name String 
    description String?
    isPublic Boolean  @default(false)

    weekSchedule Json // { "monday": 1, "tuesday": null, "wednesday": 2, etc. }


    // Proprietario
    userId Int
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    isActive Boolean @default(true) //possiamo mostrare tutto lo storico delle schede pubbliche
    createdAt DateTime @default(now())
    likes Int @default(0) //mi piace degli utenti

    @@map("workout_plans")

}

model Exercise {
    id Int @id @default(autoincrement())
    name String
    description String?
    muscleGroup String

    workoutExercises WorkoutExercise[]
    exerciseRecords ExerciseRecord[] // Per leaderboard

    createdAt DateTime @default(now())

    
    @@map("exercises")
}

// Tabella di collegamento Exercise <-> DailyWorkout
model WorkoutExercise {
    id Int @id @default(autoincrement())
    
    // Configurazione specifica per questo workout
    sets Int?
    reps String? // "8-12", "10", "AMRAP", etc.
    weight Decimal?
    restTime Int? // Secondi di riposo
    order Int // Ordine SPECIFICO per questo workout
    notes String?
    
    // Relazioni
    exerciseId Int
    dailyWorkoutId Int
    exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
    dailyWorkout DailyWorkout @relation(fields: [dailyWorkoutId], references: [id], onDelete: Cascade)
    
    // Ordine univoco per workout
    @@unique([dailyWorkoutId, order])
    
    @@map("workout_exercises")
}

// Sistema di richieste GymBro
model GymBuddyRequest {
    id Int @id @default(autoincrement())
    fromUserId Int
    toUserId Int
    gymId Int
    message String?
    status Status @default(PENDING) // "PENDING", "ACCEPTED", "DECLINED"
    
    // Relazioni
    fromUser User @relation("SentRequests", fields: [fromUserId], references: [id], onDelete: Cascade)
    toUser User @relation("ReceivedRequests", fields: [toUserId], references: [id], onDelete: Cascade)
    gym Gym @relation(fields: [gymId], references: [id], onDelete: Cascade)
    
    createdAt DateTime @default(now())
    
    @@unique([fromUserId, toUserId, gymId]) // Una richiesta per coppia per palestra
    @@map("gym_buddy_requests")
}

enum Status {
    PENDING
    ACCEPTED
    DECLINED
}

// Tabella di amicizia GymBros (bidirezionale)
model GymBroFriendship {
    id Int @id @default(autoincrement())
    user1Id Int
    user2Id Int
    gymId Int // In quale palestra sono diventati bros
    
    // Relazioni
    user1 User @relation("User1", fields: [user1Id], references: [id], onDelete: Cascade)
    user2 User @relation("User2", fields: [user2Id], references: [id], onDelete: Cascade)
    gym Gym @relation(fields: [gymId], references: [id], onDelete: Cascade)
    
    becameFriendsAt DateTime @default(now())
    
    // Amicizia unica per palestra
    @@unique([user1Id, user2Id, gymId])
    @@map("gym_bro_friendships")
}

// Records degli esercizi (interni alla palestra), solo PR dell'utente, sia per ranking personale, sia per ranking pubblico nella palestra
model ExerciseRecord {
    id Int @id @default(autoincrement())
    userId Int
    exerciseId Int
    gymId Int
    
    // Dati del record
    weight Decimal
    reps Int
    notes String?
    
    // Tracking
    recordDate DateTime @default(now())
    
    // Relazioni
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
    gym Gym @relation(fields: [gymId], references: [id], onDelete: Cascade)

    @@unique([userId, gymId, exerciseId])
    @@map("exercise_records")
}
